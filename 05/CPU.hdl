//CPU.hdl
//Gustavo Alves Pacheco
//11821ECP011

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    //Multiplexor. If sel == 1 then out = b else out = a

    PARTS:

    //A-Command or C-Command
    Not(in = instruction[15], out = notOp);
    Mux16(a = aluoutput, b = instruction, sel = notOp, out = mux1out);

    //Write on A
    Or(a = notOp, b = instruction[5], out = writeA);
    ARegister(in = mux1out, load = writeA,
      out = outAregister, out[0..14] = addressM);

    //A or M
    And(a = instruction[15], b = instruction[12], out = switchAM);
    Mux16(a = outAregister, b = inM, sel = switchAM, out = mux2out);

    //Write on D
    And(a = instruction[15], b = instruction[4], out = writeD);
    DRegister(in = aluoutput, load = writeD, out = outDregister);

    //ALU
    ALU(x = outDregister, y = mux2out,
      zx = instruction[11],
      nx = instruction[10],
      zy = instruction[9],
      ny = instruction[8],
      f  = instruction[7],
      no = instruction[6],
      out = aluoutput, out = outM,
      zr = aluzr, ng = alung);

    //Write on M
    And(a = instruction[15], b = instruction[3], out = writeM);

    //Getting value PositiveNonZero
    Not(in = aluzr, out = alunzr);
    Not(in = alung, out = alupos);
    And(a = alunzr, b = alupos, out = posnzr);

    //Define if is a instruction with jump
    And(a = instruction[15], b = instruction[2], out = jlt);
    And(a = instruction[15], b = instruction[1], out = jeq);
    And(a = instruction[15], b = instruction[0], out = jgt);

    //Evaluate if some jump will be done
    And(a = jlt, b = alung, out = and1);
    And(a = jeq, b = aluzr, out = and2);
    And(a = jgt, b = posnzr, out = and3);

    //Evaluate if the jump will be done
    Or(a = and1, b = and2, out = and1orand2);
    Or(a = and1orand2, b = and3, out = finalOr);

    //PC
    PC(in = outAregister, load = finalOr, inc = true,
      reset = reset, out[0..14] = pc);
}
