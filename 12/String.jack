// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    static int actualLength;
    static Array string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let actualLength = 0;
      if (maxLength = 0) {
        let string = Array.new(1);
      }
      else {
        let string = Array.new(maxLength);
      }
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do string.dispose();
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return actualLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let string[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let string[actualLength] = c;
      let actualLength = actualLength + 1;
      return string;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let actualLength = actualLength - 1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i, value;
      let i = 0;

      while (i < actualLength) {
        if((string[i] > 47) & (string[i] < 58)) {
          let value = (10 * value) + (string[i] - 48);
        }
        else {
          return value;
        }
        let i = i + 1;
      }
      return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var String str;
      let str = String.new(6);
      if (val > 10) {
        do str.appendChar(((val / 10) * 10) + 48);
        do str.setInt(val / 10);
      }
      let string = str;
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
