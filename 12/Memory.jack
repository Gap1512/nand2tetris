// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram, freeList;
    static int lenght, next;

    /** Initializes the class. */
    function void init() {
      let ram              = 0;
      let lenght           = 0;
      let next             = 1;
      let freeList         = 2048;
      let freeList[lenght] = 14335;
      let freeList[next]   = null;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var Array segment, newSegment;
      let segment = freeList;
      while ((segment[lenght] < (size + 2)) | (segment[lenght] = (size + 2))) {
        let segment = segment[next];
        if (segment[next] = null) {
          return -1;
        }
      }
      let newSegment         = segment + segment[lenght] - size;
      let newSegment[next]   = null;
      let newSegment[lenght] = size;
      let segment[lenght]    = segment[lenght] - (size + 2);
      return newSegment + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array segment;
      let segment = o - 2;
      let segment[next]  = freeList[next];
      let freeList[next] = segment;
      return;
    }
}
