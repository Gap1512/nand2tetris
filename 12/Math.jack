// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToTheN;

    /** Initializes the library. */
    function void init() {
      var int x, y;
      let twoToTheN = Array.new(16);
      let x = 0;
      let y = 1;
      while (x < 16) {
        let twoToTheN[x] = y;
        let y = y + y;
        let x = x + 1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {return -x;}
      else       {return  x;}
    }

    /** Returns the i'th bit of x */
    function boolean bit(int x, int i) {
      return twoToTheN[i] & x > 0;
    }

    /** Function designed for Screen.jack, put a value in a bit */
    function int putValue(int bit, int pos, int value) {
      var int modBit;
      if (value = 1) {
        let modBit = bit | twoToTheN[pos];
      }
      else {
        let modBit = bit & (~twoToTheN[pos]);
      }
      return modBit;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int absX, absY, p;
      let absX = Math.abs(x);
      let absY = Math.abs(y);
      let p    = Math.multiplyAux(absX, absY);

      if       ((x > 0) & (y > 0)) {return  p;}
      else {if ((x > 0) & (y < 0)) {return -p;}
      else {if ((x < 0) & (y > 0)) {return -p;}
      else                         {return  p;}}}
    }

    function int multiplyAux(int x, int y) {
      var int i, shiftedX, sum;
      let shiftedX = x;
      let sum      = 0;
      let i        = 0;
      while (i < 16) {
        if (Math.bit(y, i)) {let sum = sum + shiftedX;}
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int absX, absY, q;
      let absX = Math.abs(x);
      let absY = Math.abs(y);
      let q = Math.divideAux(absX, absY);

      if       ((x > 0) & (y > 0)) {return  q;}
      else {if ((x > 0) & (y < 0)) {return -q;}
      else {if ((x < 0) & (y > 0)) {return -q;}
      else                         {return  q;}}}
    }

    function int divideAux(int x, int y) {
      var int q;
      if ((y > x) | (y < 0))  {return 0;}
      let q = Math.divideAux(x, y + y);
      if ((x - (q + q * y)) < y) {return q + q;}
      else                       {return q + q + 1;}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, i, term;
      let y = 0;
      let i = 7;
      while (i > -1) {
        let term = (y + twoToTheN[i]) * (y + twoToTheN[i]);
        if (((term < x) | (term = x)) & (term > 0)) {
          let y = y + twoToTheN[i];
        }
        let i = i - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {return a;}
      else       {return b;}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a > b) {return b;}
      else       {return a;}
    }
}
