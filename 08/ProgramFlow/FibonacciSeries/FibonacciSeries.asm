//pushargument1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//poppointer1
@SP
M=M-1
A=M
D=M
@4
M=D
//pushconstant0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//popthat0
@0
D=A
@THAT
D=M+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pushconstant1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//popthat1
@1
D=A
@THAT
D=M+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pushargument0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pushconstant2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//popargument0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//labelMAIN_LOOP_START
(FibonacciSeries.MAIN_LOOP_START)
//pushargument0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//if-gotoCOMPUTE_ELEMENT
@SP
M=M-1
D=M
A=D
D=M
@FibonacciSeries.COMPUTE_ELEMENT
D;JNE
//gotoEND_PROGRAM
@FibonacciSeries.END_PROGRAM
0;JMP
//labelCOMPUTE_ELEMENT
(FibonacciSeries.COMPUTE_ELEMENT)
//pushthat0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pushthat1
@1
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
//popthat2
@2
D=A
@THAT
D=M+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//pushpointer1
@4
D=M
@SP
A=M
M=D
@SP
M=M+1
//pushconstant1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
A=A-1
M=D+M
//poppointer1
@SP
M=M-1
A=M
D=M
@4
M=D
//pushargument0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
//pushconstant1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
A=A-1
M=M-D
//popargument0
@0
D=A
@ARG
D=M+D
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
//gotoMAIN_LOOP_START
@FibonacciSeries.MAIN_LOOP_START
0;JMP
//labelEND_PROGRAM
(FibonacciSeries.END_PROGRAM)
